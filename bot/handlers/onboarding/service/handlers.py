from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from database.models import User
from .keyboards import get_service_repair_keyboard
from .enums import ServiceConversationSteps
from .schemas import ServiceRepairInfo
from ..handlers import parse_russian_phone_number, update_user_phone_number
from ..keyboards import get_send_contact_keyboard, get_main_keyboard

"""
THE_BEST_SERVICE_BUTTON_TEXT = "–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
THE_BEST_PRICE_BUTTON_TEXT = "–ù–∞–π—Ç–∏ –ª—É—á—à—É—é —Ü–µ–Ω—É"
FIND_PARTS_BUTTON_TEXT = "–ù–∞–π—Ç–∏ –∑–∞–ø—á–∞—Ç–∏"
SPEED_UP_REPAIR_BUTTON_TEXT = "–£—Å–∫–æ—Ä–∏—Ç—å —Ä–µ–º–æ–Ω—Ç/–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
OTHER_SERVICE_REPAIR_BUTTON_TEXT = "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"
"""


async def service_repair_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–µ—Ä–≤–∏—Å/—Ä–µ–º–æ–Ω—Ç üîß",
        reply_markup=get_service_repair_keyboard(),
    )

    return ServiceConversationSteps.GET_SUBCATEGORY


async def the_best_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú—ã –∑–Ω–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–π —Å–µ—Ä–≤–∏—Å."
        " –ù–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –æ—Ç–∑—ã–≤–∞—Ö –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ–ø—ã—Ç–µ –ª–∏—á–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. "
        "–ù–∞–π–¥–µ–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –¥–∞–¥–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å—É.	"
    )

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å –∏–ª–∏ vin –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã",
    )
    context.user_data["service_repair_info"] = ServiceRepairInfo(
        type="best",
    )
    return ServiceConversationSteps.GET_REGISTRATION_NUMBER_OR_VIN


async def get_registration_number_or_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.message.text
    repair_data: ServiceRepairInfo = context.user_data["service_repair_info"]

    print('alo')

    if len(data) > 9:
        repair_data.vin = data
    else:
        repair_data.registration_number = data

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –º–∞—à–∏–Ω—ã",
    )

    return ServiceConversationSteps.GET_MILEAGE


async def get_mileage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.message.text
    repair_data: ServiceRepairInfo = context.user_data["service_repair_info"]

    repair_data.mileage = data
    if repair_data.type == 'boost':
        return await finish_best_service(update, context)

    await update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å (–Ω–∞ –ø—Ä–∏–º–µ—Ä: –¢–û, –∑–∞–º–µ–Ω–∞ –∫–æ–ª–æ–¥–æ–∫, –∫—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç –∏ —Ç.–¥.)",
    )

    return ServiceConversationSteps.GET_PROBLEM_DESCRIPTION


async def get_problem_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.message.text
    repair_data: ServiceRepairInfo = context.user_data["service_repair_info"]

    repair_data.problem_description = data

    if not context.database_user.phone_number:
        context.user_data["next_function"] = finish_best_service
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=get_send_contact_keyboard(),
        )
        return ServiceConversationSteps.GET_PHONE_NUMBER

    return await finish_best_service(update, context)


async def finish_best_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    repair_data: ServiceRepairInfo = context.user_data["service_repair_info"]

    # TODO: send message to admin

    await update.message.reply_text(
        f"{repair_data.type} {repair_data.registration_number} {repair_data.vin} {repair_data.mileage} {repair_data.problem_description}",
    )

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
        reply_markup=get_main_keyboard(),
    )

    del context.user_data["service_repair_info"]

    return ConversationHandler.END


async def speed_up_repair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service_repair_info"] = ServiceRepairInfo(
        type="boost",
    )
    await update.message.reply_text(
        "–¢–∞–∫ —Å–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ —Ä–µ–º–æ–Ω—Ç –∏–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–ª–∞–¥–∫–æ. "
        "–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. "
        "–ë—É–∫–≤–∞–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–≤–æ–¥–Ω—ã—Ö –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è."
    )
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å –∏–ª–∏ vin –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã",
    )
    return ServiceConversationSteps.GET_REGISTRATION_NUMBER_OR_VIN


async def find_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
    )
    return 'get_car_brand_and_model'


async def the_best_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
    )
    return 'get_car_brand_and_model'


async def other_service_repair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
    )
    return 'get_car_brand_and_model'


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–µ–Ω–æ",
    )
    return ConversationHandler.END


async def get_phone_number_from_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = parse_russian_phone_number(update.message.contact.phone_number)
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_main_keyboard(),
        )
        return
    database_user: User = context.database_user
    session = context.session
    await update_user_phone_number(session, database_user, phone)
    next_func = context.user_data.get('next_function')
    if next_func:
        return await next_func(update, context)
    return ConversationHandler.END


async def get_phone_number_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = parse_russian_phone_number(update.message.text)
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_main_keyboard(),
        )
        return
    database_user: User = context.database_user
    session = context.session
    await update_user_phone_number(session, database_user, phone)
    next_func = context.user_data.get('next_function')
    if next_func:
        return await next_func(update, context)
    return ConversationHandler.END
