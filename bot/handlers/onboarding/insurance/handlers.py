from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from database.models import User
from .keyboards import get_insurance_keyboard
from .enums import InsuranceConversationSteps
from .schemas import InsuranceInfo
from ..handlers import parse_russian_phone_number, update_user_phone_number
from ..keyboards import get_main_keyboard


async def insurance_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ üõ°",
        reply_markup=get_insurance_keyboard(),
    )

    return InsuranceConversationSteps.GET_SUBCATEGORY


async def choose_the_best_insurance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.database_user.phone_number:
        context.user_data['next_function'] = finish_best_insurance
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=get_main_keyboard(),
        )
        return InsuranceConversationSteps.GET_PHONE_NUMBER

    return await finish_best_insurance(update, context)


async def finish_best_insurance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥–±–µ—Ä–µ—Ç –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è. –ó–∞–¥–∞—Å—Ç –≤–∞–º –±—É–∫–≤–∞–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å—Ä–∞–∑—É –Ω–∞—á–Ω–µ—Ç —Ä–∞–±–æ—Ç—É.",
        reply_markup=get_main_keyboard(),
    )
    return ConversationHandler.END


async def help_with_insurance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∏–ª–∏ vin-–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–∞.",
    )

    return InsuranceConversationSteps.GET_REGISTRATION_NUMBER_OR_VIN


async def save_registration_number_or_vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.message.text
    insurance_info = InsuranceInfo()

    if len(data) > 9:
        insurance_info.vin = data
    else:
        insurance_info.registration_number = data

    context.user_data['insurance_info'] = insurance_info

    if not context.database_user.phone_number:
        context.user_data['next_function'] = finish_help_with_insurance
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç",
            reply_markup=get_main_keyboard(),
        )
        return InsuranceConversationSteps.GET_PHONE_NUMBER

    return await finish_help_with_insurance(update, context)


async def finish_help_with_insurance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    insurance_info: InsuranceInfo = context.user_data['insurance_info']

    await update.message.reply_text(
        f"–í—ã –≤–≤–µ–ª–∏ {'vin' if insurance_info.vin else '–≥–æ—Å–Ω–æ–º–µ—Ä'}: {insurance_info.vin or insurance_info.registration_number}."
    )

    await update.message.reply_text(
        "–¢–∞–∫ —Å–ª—É—á–∞–µ—Ç—Å—è, —á—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–µ –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –≥–ª–∞–¥–∫–æ. "
        "–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. "
        "–ë—É–∫–≤–∞–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–≤–æ–¥–Ω—ã—Ö –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è.",
        reply_markup=get_main_keyboard(),
    )

    return ConversationHandler.END


async def get_phone_number_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = parse_russian_phone_number(update.message.text)
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_main_keyboard(),
        )
        return
    database_user: User = context.database_user
    session = context.session
    await update_user_phone_number(session, database_user, phone)
    next_func = context.user_data.get('next_function')
    if next_func:
        return await next_func(update, context)
    return ConversationHandler.END


async def get_phone_number_from_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = parse_russian_phone_number(update.message.contact.phone_number)
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=get_main_keyboard(),
        )
        return
    database_user: User = context.database_user
    session = context.session
    await update_user_phone_number(session, database_user, phone)
    next_func = context.user_data.get('next_function')
    if next_func:
        return await next_func(update, context)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–∞",
        reply_markup=get_main_keyboard(),
    )

    return ConversationHandler.END
